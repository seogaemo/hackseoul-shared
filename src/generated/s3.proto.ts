// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.27.3
// source: s3.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "s3";

export interface UploadImage {
  base64Image: string;
}

export interface UploadImageResponse {
  imagePath: string;
}

export const S3_PACKAGE_NAME = "s3";

export interface S3ServiceClient {
  uploadImage(request: UploadImage): Observable<UploadImageResponse>;
}

export interface S3ServiceController {
  uploadImage(
    request: UploadImage,
  ): Promise<UploadImageResponse> | Observable<UploadImageResponse> | UploadImageResponse;
}

export function S3ServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["uploadImage"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("S3Service", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("S3Service", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const S3_SERVICE_NAME = "S3Service";
