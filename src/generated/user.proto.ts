// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.27.3
// source: user.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "user";

export enum Role {
  /** UNSPECIFIED - 기본값 또는 알 수 없는 역할 */
  UNSPECIFIED = 0,
  /** ADMIN - 관리자 */
  ADMIN = 1,
  /** DISTRIBUTOR - 위탁판매자 */
  DISTRIBUTOR = 2,
  UNRECOGNIZED = -1,
}

export interface UserResponse {
  uid: string;
  name: string;
  id: string;
  role: Role;
}

export interface GetUserById {
  id: string;
}

export interface GetUserByUid {
  uid: string;
}

export interface CreateUser {
  user: CreateUserRequest | undefined;
}

export interface CreateUserRequest {
  name: string;
  id: string;
  password: string;
  role: Role;
}

export interface CreateUserResponse {
  uid: string;
}

export const USER_PACKAGE_NAME = "user";

export interface UserServiceClient {
  getUserById(request: GetUserById): Observable<UserResponse>;

  getUserByUid(request: GetUserByUid): Observable<UserResponse>;

  createUser(request: CreateUser): Observable<CreateUserResponse>;
}

export interface UserServiceController {
  getUserById(request: GetUserById): Promise<UserResponse> | Observable<UserResponse> | UserResponse;

  getUserByUid(request: GetUserByUid): Promise<UserResponse> | Observable<UserResponse> | UserResponse;

  createUser(request: CreateUser): Promise<CreateUserResponse> | Observable<CreateUserResponse> | CreateUserResponse;
}

export function UserServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getUserById", "getUserByUid", "createUser"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USER_SERVICE_NAME = "UserService";
