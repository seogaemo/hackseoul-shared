// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.27.3
// source: auth.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { SuccessResponse } from "./messages/messages.proto";
import { CreateUserRequest } from "./user.proto";

export const protobufPackage = "auth";

export interface SignIn {
  id: string;
  password: string;
}

export interface SignInResponse {
  token: string;
}

export const AUTH_PACKAGE_NAME = "auth";

export interface AuthServiceClient {
  signIn(request: SignIn): Observable<SignInResponse>;

  signUp(request: CreateUserRequest): Observable<SuccessResponse>;
}

export interface AuthServiceController {
  signIn(request: SignIn): Promise<SignInResponse> | Observable<SignInResponse> | SignInResponse;

  signUp(request: CreateUserRequest): Promise<SuccessResponse> | Observable<SuccessResponse> | SuccessResponse;
}

export function AuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["signIn", "signUp"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const AUTH_SERVICE_NAME = "AuthService";
