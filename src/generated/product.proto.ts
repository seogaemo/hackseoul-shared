// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.27.3
// source: product.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { SuccessResponse, Uid } from "./messages/messages.proto";

export const protobufPackage = "product";

export interface CreateProduct {
  title: string;
  companyId: string;
}

export interface ProductResponse {
  uid: string;
  title: string;
  companyId: string;
}

export const PRODUCT_PACKAGE_NAME = "product";

export interface ProductServiceClient {
  createProduct(request: CreateProduct): Observable<SuccessResponse>;

  getProduct(request: Uid): Observable<ProductResponse>;
}

export interface ProductServiceController {
  createProduct(request: CreateProduct): Promise<SuccessResponse> | Observable<SuccessResponse> | SuccessResponse;

  getProduct(request: Uid): Promise<ProductResponse> | Observable<ProductResponse> | ProductResponse;
}

export function ProductServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createProduct", "getProduct"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ProductService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ProductService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const PRODUCT_SERVICE_NAME = "ProductService";
